/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/ws/market-history/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description
     *           WebSocket Connection
     *           Upgrade to WebSocket connection on this endpoint. Use Postman instead of OPENAPI
     *
     *           Expected Client-to-Server Message:
     *           json:
     *             {
     *               "steamid": "string",
     *               "cookies": "string"
     *             }
     *
     *           Expected Server-to-Client Message:
     *           json:
     *             {
     *               "currentFetch": "number",
     *               "allFetches": "number"
     *             }
     *          */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ws/market-history/sync": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description
     *           WebSocket Connection
     *           Upgrade to WebSocket connection on this endpoint. Use Postman instead of OPENAPI
     *
     *           Expected Client-to-Server Message:
     *           json:
     *             {
     *               "steamid": "string",
     *               "cookies": "string"
     *             }
     *
     *           Expected Server-to-Client Message:
     *           json:
     *             {
     *               "currentFetch": "number",
     *               "allFetches": "number"
     *             }
     *          */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ws/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description
     *           WebSocket Connection
     *           Upgrade to WebSocket connection on this endpoint. Use Postman instead of OPENAPI
     *
     *           Expected Client-to-Server Message:
     *           json:
     *             { "health": true }
     *
     *           Expected Server-to-Client Message:
     *           json:
     *             { "approve": true }
     *          */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/market/collections-market": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              collections: string[];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/inventory/collections-inventory": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              collections: string[];
            };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;

export type TWsSendToServer = {
  cookies: string;
  steamid: string;
};

export type TWsRecievedFromServer = {
  currentFetch: number;
  allFetches: number;
};
